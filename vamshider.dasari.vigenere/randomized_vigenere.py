###############################################
# Name: Vamshider Reddy,Dasari
# Class: CMPS 5363 Cryptography
# Date: 28 July 2015
# Program 2 - Vigenere Cipher
###############################################
# importing all library functions
import string
import argparse
import random
import sys
from pprint import pprint

# taking symbols as input which has ASCII values from 32 to 126 incluse
symbols="""!"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] ^_`abcdefghijklmnopqrstuvwxyz{|}~"""

#This function is used to generate the keyword from the given seed.
def keywordFromSeed(seed):
    Letters = []
    seed = int(seed)

    while seed > 0:
        #poping out last two and converting to respective alphabet
        Letters.insert(0,chr((seed % 100) % 26 + 65))
        seed = seed // 100
    return ''.join(Letters)

#encrypt function
#This function is used to encrypt the messege by using vigenere table
# parametes are msg-the messege we want to encrypt is read from file.
#key-The key is generated by the seed value.
#the seed is to generate the vigenere matrix
def encrypt(msg,key,seed):
    encode = ""
    vmatrix = buildVigenere(symbols,seed)
    i = 0
    while(i<len(msg)):
        mindex = i
        kindex = i % len(key)
        for k in range(len(symbols)):
            if (msg[mindex] == vmatrix[0][k]):
                 col = k           
        for l in range(len(symbols)):
            for m in range(1):
                if (key[kindex] == vmatrix[l][m]):
                    encode+=vmatrix[l][col]
        i += 1
    return encode

#decrypt function
#This function is decrypt the encrypted msg by using vigenere and key.
#parameters are emsg-the encrypted messege we will read from file.
#key-The key is generated by the seed value.
#the seed is to generate the vigenere matrix
def decrypt(emsg,key,seed):
    vmatrix = buildVigenere(symbols,seed)
    decode= ""
    i = 0
    while (i<len(emsg)):
        emindex = i
        ekindex = i % len(key)
        for b in range(len(symbols)):
            if (key[ekindex] == vmatrix[b][0]):
                    row = b
        for c in range(len(symbols)):
            if (emsg[emindex] == vmatrix[row][c]):
                decode+=vmatrix[0][c]
        i += 1
    return decode

def buildVigenere(symbols,seed):

    n = len(symbols)

    vig = [[0 for i in range(n)] for i in range(n)]
    temp = symbols
    for char in temp:
        random.seed(seed)
        exists = []
        for j in range(n):
            r = random.randrange(len(temp))
    
            if r not in exists:
                exists.append(r)
            
            else:
                while(r in exists):
                    r = random.randrange(len(temp))
                exists.append(r)
            while(vig[j][r] != 0):
                r = (r + 1) % n

            vig[j][r] = char
    return vig
#main function.
def main():
    cipherText = encrypt(message,key,seed)
    plainText = decrypt(cipherText,key,seed)
if __name__ == '__main__':
    main()


